# Macro file for the initialization of an interactive session
#This gets executed automatically if the main file is executed without an argument (= another macro file)
#
# Set some default verbose - done in How-To-Geant4.cc now
#/control/verbose 2
#/control/saveHistory
#/run/verbose 2
#/control/verbose 0
#/process/verbose 0
#/process/had/verbose 0
#/control/saveHistory
#/run/verbose 0

#
#/custom/GDML/loadFile Test0.gdml
#/custom/GDML/LoadOnly true
#/custom/GDML/writeFile Test0.gdml
#
/run/initialize
#
# Use these open statements to open selected visualization
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create an OpenInventor view:
#/vis/open OI
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointVector -1 0 0
/vis/viewer/set/viewpointThetaPhi 120 150
/vis/viewer/set/lightsVector -1 0 0
/vis/viewer/set/background 1 1 1 1 #background white
/vis/viewer/set/background 0 0 0 1 #background black

# Specify style (surface, wireframe, auxiliary edges,...)
#/vis/viewer/set/style wireframe
/vis/viewer/set/style surface
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100
/vis/viewer/set/hiddenMarker true


#
# Specify zoom value:
#/vis/viewer/zoom 1.4
#

#
# Axes, scale, etc.
#/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes -1 -1 -1   # Simple axes: x=red, y=green, z=blue.
/vis/scene/add/eventID # Drawn at end of event
#/vis/scene/add/date    # Date stamp
#/vis/scene/add/logo2D  # Simple logo
#/vis/scene/add/logo    # 3D logo
#
# Frame
#/vis/set/colour red
#/vis/set/lineWidth 2
#/vis/scene/add/frame   # Simple frame around the view
#/vis/set/colour       # Revert to default colour (white)
#/vis/set/lineWidth     # Revert to default line width (1.)
#
# Attach text to one edge of Shape1, with a small, fixed offset
#/vis/scene/add/text 0 6 -4 cm 18 4 4 Shape1
# Attach text to one corner of Shape2, with a small, fixed offset
#/vis/scene/add/text 6 7 10 cm 18 4 4 Shape2
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only gammas:
/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
/vis/filtering/trajectories/particleFilter-0/add proton
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set e- red
/vis/modeling/trajectories/drawByParticleID-0/set gamma green
/vis/modeling/trajectories/drawByParticleID-0/set neutron yellow
/vis/modeling/trajectories/drawByParticleID-0/set alpha blue
/vis/modeling/trajectories/drawByParticleID-0/set GenericIon blue
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
#Give shapes a colour and set transparency - better to do this hardcoded in Detectorconstruction.cc because macro commands, which change geometry will reset this
#/vis/geometry/set/colour Shapename 0 r g b tranparency
#/vis/geometry/set/colour Box          0 1 0 0 .8
#/vis/geometry/set/colour BoxRotated   0 0 1 0 .8
#/vis/geometry/set/colour Cylinder     0 1 0 0 .8
#/vis/geometry/set/colour Cylinder2    0 0 1 0 .8
#/vis/geometry/set/colour Sphere       0 1 0 0 .8
#/vis/geometry/set/colour Sphere2      0 0 1 0 .8
#/vis/geometry/set/colour Cone         0 1 0 0 .8
#/vis/geometry/set/colour Cone2        0 0 1 0 .8
#/vis/geometry/set/colour Trapezoid    0 1 0 0 .8
#/vis/geometry/set/colour Trapezoid2   0 0 1 0 .8
#/vis/geometry/set/colour Torus        0 1 0 0 .8
#/vis/geometry/set/colour BoxCylinder  0 1 1 0 .8
#/vis/geometry/set/colour Mother       0 0 0 1 .3


# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush


#Commands to use with the General Particle Source (GPS)
/gps/particle proton     #beam particle
/gps/position 0. 0 0      #GPS position
/gps/direction 0 0 1     #oriented along the Z axis
/gps/ene/type Mono       #monoenergetic:   I=E
/gps/ene/mono 14 MeV   #sets energy for monoenergetic sources
#/gps/pos/type Point

#Define a scoring Mesh, assign a scorer+filter  and save the output in file
#
#define a boxMesh (cube) with name boxMesh_1
#/score/create/boxMesh boxMesh_1
#define x,y,z-sizes
#/score/mesh/boxSize 10. 10. 10. cm 
#define number of bins for each axes
#/score/mesh/nBin 10 10 10 
#Place scoring mesh
#/score/mesh/translate/xyz 0. 0. 50. cm 

#define a scorer via 
#/score/quantity/xxxxx <scorer_name>
# 'xxxxx' can be: energyDeposit, doseDeposit, trackLength, cellFlux, cellCharge, passageCellFlux, nOfStep, nOfSecondary, nOfCollision, nOfTrack, nOfTerminatedTrack, ...
#/score/quantity/energyDeposit eDep

#apply a filter to the scorer we are currently creating scorer
#/score/filter/kineticEnergy <filter_name> <eLow> <eHigh> <unit>
#/score/filter/particle <filter_name> <p1> <p2> <pn> 

#Close the mesh when defining scorers is done
#/score/close

#Drawing a scorer via
#/score/drawProjection <mesh_name> <scorer_name> <color_map> 
#/score/drawProjection boxMesh_1 eDep

#Write scores to a file (existing ones get overwriten!) at the end via
#/score/dumpAllQuantitiesToFile <mesh_name> <file_name>
#/score/dumpAllQuantitiesToFile boxMesh_1 boxMesh1Scorer.csv